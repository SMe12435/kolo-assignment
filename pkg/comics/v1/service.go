package v1

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ComicService struct {
	version string
}

type Comic struct {
	Id           int    `json:"id"`
	CategoryName string `json:"categoryName"`
	URL          string `json:"url"`
	SongName     string `json:"songName"`
	SongAuthor   string `json:"songAuthor"`
	SongDuration string `json:"songDuration"`
	ThumbImage   string `json:"thumbImage"`
}

type ComicData struct {
	Offset  int           `json:"offset"`
	Limit   int           `json:"limit"`
	Total   int           `json:"total"`
	Count   int           `json:"count"`
	Results []ComicResult `json:"results"`
}

type ComicResult struct {
	ID          int           `json:"id"`
	Name        string        `json:"name"`
	Description string        `json:"description"`
	Modified    string        `json:"modified"`
	Thumbnail   ThumbnailData `json:"thumbnail"`
	ResourceURI string        `json:"resourceURI"`
	Comics      interface{}   `json:"comics"`
	Series      interface{}   `json:"series"`
	Stories     interface{}   `json:"stories"`
	Events      interface{}   `json:"events"`
	Urls        interface{}   `json:"urls"`
}

type ThumbnailData struct {
	Path      string `json:"path"`
	Extension string `json:"extension"`
}

type AutoGenerated struct {
	Code            int       `json:"code"`
	Status          string    `json:"status"`
	Copyright       string    `json:"copyright"`
	AttributionText string    `json:"attributionText"`
	AttributionHTML string    `json:"attributionHTML"`
	Etag            string    `json:"etag"`
	Data            ComicData `json:"data"`
}

type GetComicApiResponse struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Url         string `json:"url"`
}

type SearchCharacterApiResponse struct {
	offset     int                   `json:"offset"`
	characters []GetComicApiResponse `json:"characters"`
}

func NewComicService() *ComicService {
	return &ComicService{
		version: "v2",
	}
}

func (s *ComicService) Hello() string {
	return "Hello! Sushant, Test API working fine"
}

func (s *ComicService) GetComic() (result []GetComicApiResponse, err error) {

	url := "https://gateway.marvel.com/v1/public/characters?limit=20&nameStartsWith=Abomination&ts=1661705205195&apikey=ce021c5ac52ea1591e09548b6043d2c7&hash=feb2ab81114c86cb8866d8de2cb13a0e"
	method := "GET"

	client := &http.Client{}
	req, err := http.NewRequest(method, url, nil)

	if err != nil {
		fmt.Println(err)
	}
	res, err := client.Do(req)

	defer res.Body.Close()

	//bodyBytes, err := ioutil.ReadAll(res.Body)
	//if err != nil {
	//	log.Fatal(err)
	//}
	//bodyString := string(bodyBytes)
	//log.Println(bodyString)
	var tempRes AutoGenerated
	err = json.NewDecoder(res.Body).Decode(&tempRes)

	for _, character := range tempRes.Data.Results {
		var tempCharacter GetComicApiResponse
		tempCharacter.Name = character.Name
		tempCharacter.Description = character.Description
		tempCharacter.Url = character.Thumbnail.Path + "." + character.Thumbnail.Extension

		result = append(result, tempCharacter)
	}

	if err != nil {
		fmt.Println(err.Error())
	}
	fmt.Println(result)
	return result, err
}

func (s *ComicService) SearchCharacter(searchKey string, offset string, limit string) (result SearchCharacterApiResponse, err error) {

	url := "https://gateway.marvel.com/v1/public/characters?limit=" + limit + "&offset=" + offset + "&nameStartsWith=" + searchKey + "&ts=1661705205195&apikey=ce021c5ac52ea1591e09548b6043d2c7&hash=feb2ab81114c86cb8866d8de2cb13a0e"
	method := "GET"

	client := &http.Client{}
	req, err := http.NewRequest(method, url, nil)

	if err != nil {
		fmt.Println(err)
	}
	res, err := client.Do(req)

	defer res.Body.Close()

	var tempSearchCharResp []GetComicApiResponse
	var tempRes AutoGenerated
	err = json.NewDecoder(res.Body).Decode(&tempRes)

	for _, character := range tempRes.Data.Results {
		var tempCharacter GetComicApiResponse
		tempCharacter.Name = character.Name
		tempCharacter.Description = character.Description
		tempCharacter.Url = character.Thumbnail.Path + "." + character.Thumbnail.Extension

		tempSearchCharResp = append(tempSearchCharResp, tempCharacter)
	}

	result.characters = tempSearchCharResp
	result.offset = tempRes.Data.Offset

	if err != nil {
		fmt.Println(err.Error())
	}
	//fmt.Println(result)
	return result, err
}
